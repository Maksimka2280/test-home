import axios from 'axios';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (—à–∫–æ–ª–∞)
interface SchoolElement {
  lat?: number;
  lon?: number;
  type: 'node' | 'way' | 'relation';
  center?: {
    lat: number;
    lon: number;
  };
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Overpass API
interface OverpassApiResponse {
  elements: SchoolElement[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —à–∫–æ–ª
export const fetchSchoolsInSwitzerland = async (): Promise<
  (SchoolElement & { type: number })[]
> => {
  const query = `
    [out:json][timeout:60];
    area["ISO3166-1"="CH"][admin_level=2]->.searchArea;
    (
      node["amenity"="school"](area.searchArea);
      way["amenity"="school"](area.searchArea);
      relation["amenity"="school"](area.searchArea);
    );
    out center;
  `;

  const url = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(query)}`;

  try {
    await new Promise(resolve => setTimeout(resolve, 2000)); // –û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ

    const { data } = await axios.get<OverpassApiResponse>(url); // –£–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞

    console.log('üè´ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∫–æ–ª–∞–º:', data.elements);

    return data.elements
      .map(el => {
        if (el.type === 'node') {
          return {
            lat: el.lat,
            lon: el.lon,
            type: 2,
          };
        } else if (el.center) {
          return {
            lat: el.center.lat,
            lon: el.center.lon,
            type: 2,
          };
        }
        return null;
      })
      .filter(Boolean) as (SchoolElement & { type: number })[]; // –£–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∫–æ–ª:', err);
    return [];
  }
};
